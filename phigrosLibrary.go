// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package phigroslibrary

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type Level int64
const (
  Level_EZ Level = 0
  Level_HD Level = 1
  Level_IN Level = 2
  Level_AT Level = 3
)

func (p Level) String() string {
  switch p {
  case Level_EZ: return "EZ"
  case Level_HD: return "HD"
  case Level_IN: return "IN"
  case Level_AT: return "AT"
  }
  return "<UNSET>"
}

func LevelFromString(s string) (Level, error) {
  switch s {
  case "EZ": return Level_EZ, nil 
  case "HD": return Level_HD, nil 
  case "IN": return Level_IN, nil 
  case "AT": return Level_AT, nil 
  }
  return Level(0), fmt.Errorf("not a valid Level string")
}


func LevelPtr(v Level) *Level { return &v }

func (p Level) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Level) UnmarshalText(text []byte) error {
q, err := LevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Level) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Level(v)
return nil
}

func (p * Level) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - SaveUrl
//  - SaveVersion
//  - Challenge
//  - Rks
//  - GameVersion
//  - Avatar
type Summary struct {
  SaveUrl string `thrift:"saveUrl,1,required" db:"saveUrl" json:"saveUrl"`
  SaveVersion int8 `thrift:"saveVersion,2,required" db:"saveVersion" json:"saveVersion"`
  Challenge int16 `thrift:"challenge,3,required" db:"challenge" json:"challenge"`
  Rks float64 `thrift:"rks,4,required" db:"rks" json:"rks"`
  GameVersion int8 `thrift:"gameVersion,5,required" db:"gameVersion" json:"gameVersion"`
  Avatar string `thrift:"avatar,6,required" db:"avatar" json:"avatar"`
}

func NewSummary() *Summary {
  return &Summary{}
}


func (p *Summary) GetSaveUrl() string {
  return p.SaveUrl
}

func (p *Summary) GetSaveVersion() int8 {
  return p.SaveVersion
}

func (p *Summary) GetChallenge() int16 {
  return p.Challenge
}

func (p *Summary) GetRks() float64 {
  return p.Rks
}

func (p *Summary) GetGameVersion() int8 {
  return p.GameVersion
}

func (p *Summary) GetAvatar() string {
  return p.Avatar
}
func (p *Summary) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSaveUrl bool = false;
  var issetSaveVersion bool = false;
  var issetChallenge bool = false;
  var issetRks bool = false;
  var issetGameVersion bool = false;
  var issetAvatar bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSaveUrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSaveVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetChallenge = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRks = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetGameVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetAvatar = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSaveUrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SaveUrl is not set"));
  }
  if !issetSaveVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SaveVersion is not set"));
  }
  if !issetChallenge{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Challenge is not set"));
  }
  if !issetRks{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rks is not set"));
  }
  if !issetGameVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GameVersion is not set"));
  }
  if !issetAvatar{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Avatar is not set"));
  }
  return nil
}

func (p *Summary)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SaveUrl = v
}
  return nil
}

func (p *Summary)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.SaveVersion = temp
}
  return nil
}

func (p *Summary)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Challenge = v
}
  return nil
}

func (p *Summary)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Rks = v
}
  return nil
}

func (p *Summary)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.GameVersion = temp
}
  return nil
}

func (p *Summary)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *Summary) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Summary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Summary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "saveUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:saveUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SaveUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:saveUrl: ", p), err) }
  return err
}

func (p *Summary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "saveVersion", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:saveVersion: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.SaveVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:saveVersion: ", p), err) }
  return err
}

func (p *Summary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "challenge", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:challenge: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Challenge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.challenge (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:challenge: ", p), err) }
  return err
}

func (p *Summary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rks", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rks: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Rks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rks (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rks: ", p), err) }
  return err
}

func (p *Summary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gameVersion", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gameVersion: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.GameVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gameVersion (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gameVersion: ", p), err) }
  return err
}

func (p *Summary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatar", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:avatar: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:avatar: ", p), err) }
  return err
}

func (p *Summary) Equals(other *Summary) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SaveUrl != other.SaveUrl { return false }
  if p.SaveVersion != other.SaveVersion { return false }
  if p.Challenge != other.Challenge { return false }
  if p.Rks != other.Rks { return false }
  if p.GameVersion != other.GameVersion { return false }
  if p.Avatar != other.Avatar { return false }
  return true
}

func (p *Summary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Summary(%+v)", *p)
}

func (p *Summary) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - Level
//  - S
//  - A
//  - C
//  - Difficulty
//  - Rks
type SongLevel struct {
  ID string `thrift:"id,1,required" db:"id" json:"id"`
  Level Level `thrift:"level,2,required" db:"level" json:"level"`
  S int32 `thrift:"s,3,required" db:"s" json:"s"`
  A float64 `thrift:"a,4,required" db:"a" json:"a"`
  C bool `thrift:"c,5,required" db:"c" json:"c"`
  Difficulty float64 `thrift:"difficulty,6,required" db:"difficulty" json:"difficulty"`
  Rks float64 `thrift:"rks,7,required" db:"rks" json:"rks"`
}

func NewSongLevel() *SongLevel {
  return &SongLevel{}
}


func (p *SongLevel) GetID() string {
  return p.ID
}

func (p *SongLevel) GetLevel() Level {
  return p.Level
}

func (p *SongLevel) GetS() int32 {
  return p.S
}

func (p *SongLevel) GetA() float64 {
  return p.A
}

func (p *SongLevel) GetC() bool {
  return p.C
}

func (p *SongLevel) GetDifficulty() float64 {
  return p.Difficulty
}

func (p *SongLevel) GetRks() float64 {
  return p.Rks
}
func (p *SongLevel) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetLevel bool = false;
  var issetS bool = false;
  var issetA bool = false;
  var issetC bool = false;
  var issetDifficulty bool = false;
  var issetRks bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLevel = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetS = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetA = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetC = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetDifficulty = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetRks = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetLevel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Level is not set"));
  }
  if !issetS{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field S is not set"));
  }
  if !issetA{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field A is not set"));
  }
  if !issetC{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field C is not set"));
  }
  if !issetDifficulty{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Difficulty is not set"));
  }
  if !issetRks{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rks is not set"));
  }
  return nil
}

func (p *SongLevel)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SongLevel)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Level(v)
  p.Level = temp
}
  return nil
}

func (p *SongLevel)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.S = v
}
  return nil
}

func (p *SongLevel)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.A = v
}
  return nil
}

func (p *SongLevel)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.C = v
}
  return nil
}

func (p *SongLevel)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Difficulty = v
}
  return nil
}

func (p *SongLevel)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Rks = v
}
  return nil
}

func (p *SongLevel) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SongLevel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SongLevel) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *SongLevel) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *SongLevel) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "s", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:s: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.S)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:s: ", p), err) }
  return err
}

func (p *SongLevel) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "a", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:a: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:a: ", p), err) }
  return err
}

func (p *SongLevel) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "c", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:c: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.C)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.c (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:c: ", p), err) }
  return err
}

func (p *SongLevel) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "difficulty", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:difficulty: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Difficulty)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.difficulty (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:difficulty: ", p), err) }
  return err
}

func (p *SongLevel) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rks", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:rks: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Rks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rks (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:rks: ", p), err) }
  return err
}

func (p *SongLevel) Equals(other *SongLevel) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Level != other.Level { return false }
  if p.S != other.S { return false }
  if p.A != other.A { return false }
  if p.C != other.C { return false }
  if p.Difficulty != other.Difficulty { return false }
  if p.Rks != other.Rks { return false }
  return true
}

func (p *SongLevel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SongLevel(%+v)", *p)
}

func (p *SongLevel) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - Level
//  - Acc
//  - Expect
type SongExpect struct {
  ID string `thrift:"id,1,required" db:"id" json:"id"`
  Level Level `thrift:"level,2,required" db:"level" json:"level"`
  Acc float64 `thrift:"acc,3,required" db:"acc" json:"acc"`
  Expect float64 `thrift:"expect,4,required" db:"expect" json:"expect"`
}

func NewSongExpect() *SongExpect {
  return &SongExpect{}
}


func (p *SongExpect) GetID() string {
  return p.ID
}

func (p *SongExpect) GetLevel() Level {
  return p.Level
}

func (p *SongExpect) GetAcc() float64 {
  return p.Acc
}

func (p *SongExpect) GetExpect() float64 {
  return p.Expect
}
func (p *SongExpect) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetLevel bool = false;
  var issetAcc bool = false;
  var issetExpect bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLevel = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetAcc = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetExpect = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetLevel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Level is not set"));
  }
  if !issetAcc{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Acc is not set"));
  }
  if !issetExpect{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Expect is not set"));
  }
  return nil
}

func (p *SongExpect)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SongExpect)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Level(v)
  p.Level = temp
}
  return nil
}

func (p *SongExpect)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Acc = v
}
  return nil
}

func (p *SongExpect)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Expect = v
}
  return nil
}

func (p *SongExpect) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SongExpect"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SongExpect) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *SongExpect) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *SongExpect) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "acc", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:acc: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Acc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.acc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:acc: ", p), err) }
  return err
}

func (p *SongExpect) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expect", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expect: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Expect)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expect (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expect: ", p), err) }
  return err
}

func (p *SongExpect) Equals(other *SongExpect) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Level != other.Level { return false }
  if p.Acc != other.Acc { return false }
  if p.Expect != other.Expect { return false }
  return true
}

func (p *SongExpect) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SongExpect(%+v)", *p)
}

func (p *SongExpect) Validate() error {
  return nil
}
type Phigros interface {
  // Parameters:
  //  - SessionToken
  GetSaveUrl(ctx context.Context, sessionToken string) (_r *Summary, _err error)
  // Parameters:
  //  - SaveUrl
  Best19(ctx context.Context, saveUrl string) (_r []*SongLevel, _err error)
  // Parameters:
  //  - SaveUrl
  //  - Num
  Bestn(ctx context.Context, saveUrl string, num int8) (_r []*SongLevel, _err error)
  // Parameters:
  //  - SaveUrl
  SongExpects(ctx context.Context, saveUrl string) (_r []*SongExpect, _err error)
}

type PhigrosClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewPhigrosClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PhigrosClient {
  return &PhigrosClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPhigrosClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PhigrosClient {
  return &PhigrosClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPhigrosClient(c thrift.TClient) *PhigrosClient {
  return &PhigrosClient{
    c: c,
  }
}

func (p *PhigrosClient) Client_() thrift.TClient {
  return p.c
}

func (p *PhigrosClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *PhigrosClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - SessionToken
func (p *PhigrosClient) GetSaveUrl(ctx context.Context, sessionToken string) (_r *Summary, _err error) {
  var _args0 PhigrosGetSaveUrlArgs
  _args0.SessionToken = sessionToken
  var _result2 PhigrosGetSaveUrlResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "getSaveUrl", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSaveUrl failed: unknown result")
}

// Parameters:
//  - SaveUrl
func (p *PhigrosClient) Best19(ctx context.Context, saveUrl string) (_r []*SongLevel, _err error) {
  var _args4 PhigrosBest19Args
  _args4.SaveUrl = saveUrl
  var _result6 PhigrosBest19Result
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "best19", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - SaveUrl
//  - Num
func (p *PhigrosClient) Bestn(ctx context.Context, saveUrl string, num int8) (_r []*SongLevel, _err error) {
  var _args7 PhigrosBestnArgs
  _args7.SaveUrl = saveUrl
  _args7.Num = num
  var _result9 PhigrosBestnResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "bestn", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - SaveUrl
func (p *PhigrosClient) SongExpects(ctx context.Context, saveUrl string) (_r []*SongExpect, _err error) {
  var _args10 PhigrosSongExpectsArgs
  _args10.SaveUrl = saveUrl
  var _result12 PhigrosSongExpectsResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "songExpects", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

type PhigrosProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Phigros
}

func (p *PhigrosProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PhigrosProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PhigrosProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPhigrosProcessor(handler Phigros) *PhigrosProcessor {

  self13 := &PhigrosProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self13.processorMap["getSaveUrl"] = &phigrosProcessorGetSaveUrl{handler:handler}
  self13.processorMap["best19"] = &phigrosProcessorBest19{handler:handler}
  self13.processorMap["bestn"] = &phigrosProcessorBestn{handler:handler}
  self13.processorMap["songExpects"] = &phigrosProcessorSongExpects{handler:handler}
return self13
}

func (p *PhigrosProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x14.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x14

}

type phigrosProcessorGetSaveUrl struct {
  handler Phigros
}

func (p *phigrosProcessorGetSaveUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err15 error
  args := PhigrosGetSaveUrlArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSaveUrl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PhigrosGetSaveUrlResult{}
  if retval, err2 := p.handler.GetSaveUrl(ctx, args.SessionToken); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc16 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSaveUrl: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getSaveUrl", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := _exc16.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if _write_err15 != nil {
      return false, thrift.WrapTException(_write_err15)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getSaveUrl", thrift.REPLY, seqId); err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if _write_err15 != nil {
    return false, thrift.WrapTException(_write_err15)
  }
  return true, err
}

type phigrosProcessorBest19 struct {
  handler Phigros
}

func (p *phigrosProcessorBest19) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err17 error
  args := PhigrosBest19Args{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "best19", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PhigrosBest19Result{}
  if retval, err2 := p.handler.Best19(ctx, args.SaveUrl); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc18 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing best19: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "best19", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := _exc18.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
      _write_err17 = thrift.WrapTException(err2)
    }
    if _write_err17 != nil {
      return false, thrift.WrapTException(_write_err17)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "best19", thrift.REPLY, seqId); err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err17 == nil && err2 != nil {
    _write_err17 = thrift.WrapTException(err2)
  }
  if _write_err17 != nil {
    return false, thrift.WrapTException(_write_err17)
  }
  return true, err
}

type phigrosProcessorBestn struct {
  handler Phigros
}

func (p *phigrosProcessorBestn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err19 error
  args := PhigrosBestnArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bestn", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PhigrosBestnResult{}
  if retval, err2 := p.handler.Bestn(ctx, args.SaveUrl, args.Num); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc20 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bestn: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "bestn", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err19 = thrift.WrapTException(err2)
    }
    if err2 := _exc20.Write(ctx, oprot); _write_err19 == nil && err2 != nil {
      _write_err19 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err19 == nil && err2 != nil {
      _write_err19 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err19 == nil && err2 != nil {
      _write_err19 = thrift.WrapTException(err2)
    }
    if _write_err19 != nil {
      return false, thrift.WrapTException(_write_err19)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "bestn", thrift.REPLY, seqId); err2 != nil {
    _write_err19 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err19 == nil && err2 != nil {
    _write_err19 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err19 == nil && err2 != nil {
    _write_err19 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err19 == nil && err2 != nil {
    _write_err19 = thrift.WrapTException(err2)
  }
  if _write_err19 != nil {
    return false, thrift.WrapTException(_write_err19)
  }
  return true, err
}

type phigrosProcessorSongExpects struct {
  handler Phigros
}

func (p *phigrosProcessorSongExpects) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err21 error
  args := PhigrosSongExpectsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "songExpects", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PhigrosSongExpectsResult{}
  if retval, err2 := p.handler.SongExpects(ctx, args.SaveUrl); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc22 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing songExpects: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "songExpects", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err21 = thrift.WrapTException(err2)
    }
    if err2 := _exc22.Write(ctx, oprot); _write_err21 == nil && err2 != nil {
      _write_err21 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err21 == nil && err2 != nil {
      _write_err21 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err21 == nil && err2 != nil {
      _write_err21 = thrift.WrapTException(err2)
    }
    if _write_err21 != nil {
      return false, thrift.WrapTException(_write_err21)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "songExpects", thrift.REPLY, seqId); err2 != nil {
    _write_err21 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err21 == nil && err2 != nil {
    _write_err21 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err21 == nil && err2 != nil {
    _write_err21 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err21 == nil && err2 != nil {
    _write_err21 = thrift.WrapTException(err2)
  }
  if _write_err21 != nil {
    return false, thrift.WrapTException(_write_err21)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SessionToken
type PhigrosGetSaveUrlArgs struct {
  SessionToken string `thrift:"sessionToken,1" db:"sessionToken" json:"sessionToken"`
}

func NewPhigrosGetSaveUrlArgs() *PhigrosGetSaveUrlArgs {
  return &PhigrosGetSaveUrlArgs{}
}


func (p *PhigrosGetSaveUrlArgs) GetSessionToken() string {
  return p.SessionToken
}
func (p *PhigrosGetSaveUrlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosGetSaveUrlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionToken = v
}
  return nil
}

func (p *PhigrosGetSaveUrlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSaveUrl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosGetSaveUrlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionToken: ", p), err) }
  return err
}

func (p *PhigrosGetSaveUrlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosGetSaveUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PhigrosGetSaveUrlResult struct {
  Success *Summary `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhigrosGetSaveUrlResult() *PhigrosGetSaveUrlResult {
  return &PhigrosGetSaveUrlResult{}
}

var PhigrosGetSaveUrlResult_Success_DEFAULT *Summary
func (p *PhigrosGetSaveUrlResult) GetSuccess() *Summary {
  if !p.IsSetSuccess() {
    return PhigrosGetSaveUrlResult_Success_DEFAULT
  }
return p.Success
}
func (p *PhigrosGetSaveUrlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhigrosGetSaveUrlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosGetSaveUrlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Summary{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PhigrosGetSaveUrlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSaveUrl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosGetSaveUrlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhigrosGetSaveUrlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosGetSaveUrlResult(%+v)", *p)
}

// Attributes:
//  - SaveUrl
type PhigrosBest19Args struct {
  SaveUrl string `thrift:"saveUrl,1" db:"saveUrl" json:"saveUrl"`
}

func NewPhigrosBest19Args() *PhigrosBest19Args {
  return &PhigrosBest19Args{}
}


func (p *PhigrosBest19Args) GetSaveUrl() string {
  return p.SaveUrl
}
func (p *PhigrosBest19Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosBest19Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SaveUrl = v
}
  return nil
}

func (p *PhigrosBest19Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "best19_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosBest19Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "saveUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:saveUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SaveUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:saveUrl: ", p), err) }
  return err
}

func (p *PhigrosBest19Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosBest19Args(%+v)", *p)
}

// Attributes:
//  - Success
type PhigrosBest19Result struct {
  Success []*SongLevel `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhigrosBest19Result() *PhigrosBest19Result {
  return &PhigrosBest19Result{}
}

var PhigrosBest19Result_Success_DEFAULT []*SongLevel

func (p *PhigrosBest19Result) GetSuccess() []*SongLevel {
  return p.Success
}
func (p *PhigrosBest19Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhigrosBest19Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosBest19Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SongLevel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &SongLevel{}
    if err := _elem23.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.Success = append(p.Success, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PhigrosBest19Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "best19_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosBest19Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhigrosBest19Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosBest19Result(%+v)", *p)
}

// Attributes:
//  - SaveUrl
//  - Num
type PhigrosBestnArgs struct {
  SaveUrl string `thrift:"saveUrl,1" db:"saveUrl" json:"saveUrl"`
  Num int8 `thrift:"num,2" db:"num" json:"num"`
}

func NewPhigrosBestnArgs() *PhigrosBestnArgs {
  return &PhigrosBestnArgs{}
}


func (p *PhigrosBestnArgs) GetSaveUrl() string {
  return p.SaveUrl
}

func (p *PhigrosBestnArgs) GetNum() int8 {
  return p.Num
}
func (p *PhigrosBestnArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosBestnArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SaveUrl = v
}
  return nil
}

func (p *PhigrosBestnArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.Num = temp
}
  return nil
}

func (p *PhigrosBestnArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bestn_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosBestnArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "saveUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:saveUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SaveUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:saveUrl: ", p), err) }
  return err
}

func (p *PhigrosBestnArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num: ", p), err) }
  return err
}

func (p *PhigrosBestnArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosBestnArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PhigrosBestnResult struct {
  Success []*SongLevel `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhigrosBestnResult() *PhigrosBestnResult {
  return &PhigrosBestnResult{}
}

var PhigrosBestnResult_Success_DEFAULT []*SongLevel

func (p *PhigrosBestnResult) GetSuccess() []*SongLevel {
  return p.Success
}
func (p *PhigrosBestnResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhigrosBestnResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosBestnResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SongLevel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &SongLevel{}
    if err := _elem24.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Success = append(p.Success, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PhigrosBestnResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bestn_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosBestnResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhigrosBestnResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosBestnResult(%+v)", *p)
}

// Attributes:
//  - SaveUrl
type PhigrosSongExpectsArgs struct {
  SaveUrl string `thrift:"saveUrl,1" db:"saveUrl" json:"saveUrl"`
}

func NewPhigrosSongExpectsArgs() *PhigrosSongExpectsArgs {
  return &PhigrosSongExpectsArgs{}
}


func (p *PhigrosSongExpectsArgs) GetSaveUrl() string {
  return p.SaveUrl
}
func (p *PhigrosSongExpectsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosSongExpectsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SaveUrl = v
}
  return nil
}

func (p *PhigrosSongExpectsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "songExpects_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosSongExpectsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "saveUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:saveUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SaveUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:saveUrl: ", p), err) }
  return err
}

func (p *PhigrosSongExpectsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosSongExpectsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PhigrosSongExpectsResult struct {
  Success []*SongExpect `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhigrosSongExpectsResult() *PhigrosSongExpectsResult {
  return &PhigrosSongExpectsResult{}
}

var PhigrosSongExpectsResult_Success_DEFAULT []*SongExpect

func (p *PhigrosSongExpectsResult) GetSuccess() []*SongExpect {
  return p.Success
}
func (p *PhigrosSongExpectsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhigrosSongExpectsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhigrosSongExpectsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SongExpect, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := &SongExpect{}
    if err := _elem25.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Success = append(p.Success, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PhigrosSongExpectsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "songExpects_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhigrosSongExpectsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhigrosSongExpectsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhigrosSongExpectsResult(%+v)", *p)
}


